# -*- mode: ruby -*-
# vi: set ft=ruby :
# The Vagrant ClearLinux plugin is required:
# https://github.com/AntonioMeireles/vagrant-guests-clearlinux
# Clearlinux box doesn't havre a vagrant user - the user is "clear"

# Path to the local users public key file in $HOME/.ssh
# We use it later in the shell provisioner to populate authorized_keys
ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
adminvm_karlvkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_karlv_id_rsa.pub").first.strip
adminvm_rootkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_root_id_rsa.pub").first.strip


Vagrant.configure(2) do |config|
  config.vm.box = "AntonioMeireles/ClearLinux"
  #config.vm.box_version = "21570"
  #config.vm.box_version = "22880"
  #config.vm.box_version = "23090"
  config.vm.hostname = "clearlinux"

  config.vm.usable_port_range= 2800..2900
  config.vm.network "private_network", ip: "172.16.0.220"
  config.vm.network "private_network", ip: "172.10.0.220"

  # Do some port mapping - Vagrant will try 2222 for SSH if it is in use it will grab the first 
  # unused port in the above range
  config.vm.network "forwarded_port", guest: 22, host: 2920
  config.vm.network "forwarded_port", guest: 80, host: 2921
  config.vm.network "forwarded_port", guest: 8080, host: 2922


  config.vm.provider "virtualbox" do |vb|
   vb.memory = "512"
  end # end Provider


  config.vm.provision "Setup shell environment", type: "shell" do |s|

    s.inline = <<-SHELL

    # Add the public keys "adminvm" is a VM I use for testing things like Ansible
    # Clearlinux box doesn't havre a vagrant user - the user is "clear"
    mkdir /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
   
    echo "Appending user@Laptop keys to root and vagrant authorized_keys"
    echo #{ssh_pub_key} >> /home/clear/.ssh/authorized_keys
    echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
   
    echo "Appending AdminVM keys to root and vagrant authorized_keys"
    echo #{adminvm_karlvkey} >> /home/clear/.ssh/authorized_keys
    echo #{adminvm_karlvkey} >> /root/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /home/clear/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /root/.ssh/authorized_keys

    SHELL
  end ###--- End Provisioner

  # Demonstrate using an external shell script - this one sets up nginx
#  config.vm.provision :shell, :path => "setup/bootstrap.sh"
#  config.vm.provision :shell, :path => "setup/apache.sh"

end # end configure(2)
