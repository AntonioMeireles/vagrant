# -*- mode: ruby -*-
# vi: set ft=ruby :
# Created By: Karl Vietmeier
# Basic Vagrantfile for a single VM with comments

### Set some variables
# Path to the local users public key file in $HOME/.ssh
# We use it later in the shell provisioner to populate authorized_keys
ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
adminvm_karlvkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_karlv_id_rsa.pub").first.strip
adminvm_rootkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_root_id_rsa.pub").first.strip


Vagrant.configure(2) do |config|
  config.vm.box = "centos/7"

  # Set the VM OS level Hostname
  config.vm.hostname = "centos"

  # Set the Vagrant vm name for stdout while starting VM
  config.vm.define "centos"

  ###------- Network setup section - not Provider specific
  # You can create additional private networks which are configured as host-only networks by the Provider
  # If you don't create a private network the default NAT network of the provider will be used.
  # The first interface will always be the default NAT network, private networks get added as additional
  # interfaces
  # If the network doesn't exist - based on Subnet - it will be created in the Provider (VBox, VMware) 

  # Define a range of usable ports for automatic port mapping
  config.vm.usable_port_range= 2800..2900

  # Create 2 interfaces on 2 host-only networks
  config.vm.network "private_network", ip: "172.16.0.200"
  config.vm.network "private_network", ip: "172.10.0.200"

  # Do some port mapping - Vagrant will try 2222 for SSH if it is in use it will grab the first 
  # unused port in the above range
  config.vm.network "forwarded_port", guest: 22, host: 2250
  config.vm.network "forwarded_port", guest: 80, host: 2899
  config.vm.network "forwarded_port", guest: 8080, host: 2900

  # Need to test this one more
  #config.vm.synced_folder "./nginx", "/var/www", create: true, group: "nginx", owner: "nginx"

  ###------- Provider specific VM definition and creation begins here
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "virtualbox" do |vb|

    # Set the name in Virtualbox (GUI and CLI)
    vb.name = "centos"

    # Configure the amount of memory and number of CPUs for the VM:
    vb.memory = "1024"
    vb.cpus = "1"

    ###-------  Configure low level system parameters
    # - get rid of extra stuff
    # - need "ioapic on" when adding extra drives
    # - use "vb.customize" when modifying parameters that don't have predefined aliases like "vb.cpu"
    vb.customize ["modifyvm", :id, "--ioapic", "on" ]
    vb.customize ["modifyvm", :id, "--audio", "none" ]
    vb.customize ["modifyvm", :id, "--usb", "off" ]

    ###------- Add an additional disk
    # Add SATA controller - you can only have one
    #vb.customize ['storagectl', :id, '--name',  'SATA Controller', '--add', 'sata',  '--controller', 'IntelAhci', '--portcount', 6]
    vb.customize ['storagectl', :id, '--name',  'NVME Controller', '--add', 'pcie',  '--controller', 'NVMe', '--portcount', 6]

    # Create OSD drive/s 
    unless File.exist?("Disk-01.vdi")
      vb.customize ['createhd', '--filename', "Disk-01.vdi", '--size', 512]
    end  # End create disk

    # Attach the drive to the controller
    #vb.customize [ 'storageattach', :id, '--storagectl', 'SATA Controller', '--port', "2", '--device', 0, '--type', 'hdd', '--medium', "./Disk-01.vdi"]
    vb.customize [ 'storageattach', :id, '--storagectl', 'NVME Controller', '--port', "2", '--device', 0, '--type', 'hdd', '--nonrotational', 'on', '--medium', "./Disk-01.vdi"]

  end ###--- End Provider

  ###------- Provisioner section - this is where you customize the guest OS.
  ### This example is using the Shell provisioner
  config.vm.provision "Setup shell environment", type: "shell" do |s|
    s.inline = <<-SHELL
    ### Run standard bash commands using an "inline" script
    
    # Install some useful tools and update the system
    yum install -y epel-release > /dev/null 2>&1
    yum install -y net-tools pciutils wget screen tree traceroute git gcc make python policycoreutils-python > /dev/null 2>&1 

    # Commented out until actually needed - takes too long
    #yum update -y > /dev/null 2>&1
    
    # Disable SElinux - generally not a good idea but needed for nginx for now
    sed -i 's/enforcing/disabled/g' /etc/selinux/config /etc/selinux/config
    setenforce 0

    # Add the public keys "adminvm" is a VM I use for testing things like Ansible
    mkdir /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
    echo "Appending user@Laptop keys to root and vagrant authorized_keys"
    echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
    echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
    echo "Appending AdminVM keys to root and vagrant authorized_keys"
    echo #{adminvm_karlvkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{adminvm_karlvkey} >> /root/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /root/.ssh/authorized_keys

    echo "Reboot to permenantly disable SElinux"

    SHELL
  end ###--- End Provisioner
  
  ### Example of a Reboot in the middle of provisioning
  # Requires vagrant-reload plugin
  # https://github.com/aidanns/vagrant-reload/blob/master/README.md

  config.vm.provision "shell", inline: <<-SHELL
    echo "Do something once"  
    echo $(date) > ~/rebootexample
  SHELL

  # Trigger reload
  #config.vm.provision :reload

  # Do something after the reload
  config.vm.provision "shell", inline: <<-SHELL
    echo "I just rebooted - continuing"
    echo $(date) >> ~/rebootexample
  SHELL

  ### Demonstrate using external shell scripts one sets up nginx, the other does basic bootstrap tasks 
  # Scripts are located under the the top level Vagrant folder I use so I can share them
  config.vm.provision :shell, :path => "../../scripts/bash/iconfig/bootstrap.sh"
#  config.vm.provision :shell, :path => "nginx/setupnginx.sh"
#  config.vm.provision :shell, :path => "../../scripts/bash/docker/setupdocker.sh"


end ###--- End configure(2) - this wraps up the wholething - like main()
